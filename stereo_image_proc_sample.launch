<launch>
  <!--Global parameters -->
  <!-- *****************************************-->
  <!-- Camera -->
  <arg name="fps" default="30" />
  <arg name="image_width" default="640" />
  <arg name="image_height" default="480" />
  <!--Synchronization -->
  <arg name="syncronizer_namespace" default="/stereo" />
  <arg name="left_camera_raw" default="$(arg syncronizer_namespace)/left" />
  <arg name="right_camera_raw" default="$(arg syncronizer_namespace)/right" />
  <arg name="left_camera_info_topic" default="$(arg syncronizer_namespace)/left/camera_info" />
  <arg name="right_camera_info_topic" default="$(arg syncronizer_namespace)/right/camera_info" />

  <!--Stereo -->
  <arg name="stereo_namespace" default="/stereo_camera" />
  <arg name="left_image_topic" default="$(arg stereo_namespace)/left/image_rect" />
  <arg name="right_image_topic" default="$(arg stereo_namespace)/right/image_rect" />

  <arg name="left_camera_name" default="left" />
  <arg name="right_camera_name" default="right" />

  <arg name="left_camera_frame_id" default="left_camera" />
  <arg name="right_camera_frame_id" default="right_camera" />

  <arg name="approximate_sync" default="true" />
  <arg name="approx_sync" default="true" />


  <!-- Tranfsorm -->
  <arg name="use_static_transform" default="true" />

  <!-- Visual SLAM -->
  <arg name="frame_id" default="base_link" />
  <!-- Fixed frame id, set "base_link" or "base_footprint" if they are published -->
  <arg name="rtabmap" default="true" />
  <arg name="odometry" default="true" />

  <!-- Odometry -->
  <arg name="odom_frame_id" default="odom" />
  <!-- If set, TF is used to get odometry instead of the topic -->
  <arg name="ground_truth_frame_id" default="" />
  <!-- e.g., "world" -->
  <arg name="ground_truth_base_frame_id" default="" />
  <!-- e.g., "tracker", a fake frame matching the frame "frame_id" (but on different TF tree) -->
  <arg name="wait_for_transform" default="true" />
  <arg name="wait_for_transform_duration" default="0.2" />


  <!-- Stereo Camera usb_cam -->
  <group ns="/stereo">
    <node name="left" pkg="usb_cam" type="usb_cam_node" output="screen" >
      <param name="video_device" value="/dev/video0" />
      <param name="image_width" value="$(arg image_width)" />
      <param name="image_height" value="$(arg image_height)" />
      <param name="pixel_format" value="yuyv" />
      <param name="framerate" value="$(arg fps)" />
      <param name="camera_frame_id" value="$(arg left_camera_frame_id)" />
      <param name="io_method" value="mmap"/>
      <param name="camera_info_url" type="string" value="file:///home/cslab/SLAMcatkin_ws/src/left.yaml" />
      <param name="camera_name" value="narrow_stereo/$(arg left_camera_name)" />
    </node>

    <node name="right" pkg="usb_cam" type="usb_cam_node" output="screen" >
      <param name="video_device" value="/dev/video1" />
      <param name="image_width" value="$(arg image_width)" />
      <param name="image_height" value="$(arg image_height)" />
      <param name="pixel_format" value="yuyv" />
      <param name="framerate" value="$(arg fps)" />
      <param name="camera_frame_id" value="$(arg right_camera_frame_id)" />
      <param name="io_method" value="mmap"/>
      <param name="camera_info_url" type="string" value="file:///home/cslab/SLAMcatkin_ws/src/right.yaml" />
      <param name="camera_name" value="narrow_stereo/$(arg right_camera_name)" />

    </node>
  </group>

    <!-- Image_raw View -->
    <!--
    <node name="left_image_view" pkg="image_view" type="image_view" respawn="false" output="screen" >
      <remap from="image" to="/stereo/left/image_raw" />
      <param name="autosize" value="true" />
    </node>

    <node name="right_image_view" pkg="image_view" type="image_view" respawn="false" output="screen" >
      <remap from="image" to="/stereo/right/image_raw" />
      <param name="autosize" value="true" />
    </node>
    -->

    <!-- stereo_image_proc parameters -->
  <group ns="/stereo">
    <node name="stereo_image_proc" pkg="stereo_image_proc" type="stereo_image_proc" output="screen" >
      <remap from="left/image_raw" to="$(arg left_camera_raw)/image_raw" />
      <remap from="right/image_raw" to="$(arg right_camera_raw)/image_raw" />
      <remap from="left/camera_info" to="$(arg left_camera_info_topic)" />
      <remap from="right/camera_info" to="$(arg right_camera_info_topic)" />

      <param name="approximate_sync"  value="true"/>
      <param name="queue_size"        value="10"/>
      <param name="disparity_range"   value="128"/>

      <param name="prefilter_size"    value="35" />
      <param name="prefilter_cap"     value="11" />
      <param name="correlation_window_size" value="41" />
      <param name="min_disparity"     value="-15" />
      <param name="uniqueness_ratio"  value="0.0" />
      <param name="texture_threshold" value="1000" />
      <param name="speckle_size"      value="500" />
      <param name="speckle_range"     value="16" />

    </node>
  </group>

    <!-- Disparity View-->
    <node pkg="image_view" type="stereo_view" name="stereo_view">
      <remap from="stereo" to="/stereo" />
      <remap from="image" to="image_rect_color" />
      <param name="approximate_sync" value="true" />
      <param name="queue_size" value="10" />
    </node>


    <!-- depth_image_proc parameters -->
    <!--<node name="depth_image_proc" pkg=""> -->
    <!-- Depth View-->
    <!-- <node pkg=""> -->

    <!-- Rotate the camera frame -->
    <arg name="pi/2" value="1.5707963267948966" />
    <arg name="optical_rotate" value="0 0 0 -$(arg pi/2) 0 -$(arg pi/2)" />
    <node pkg="tf" type="static_transform_publisher" name="camera_base_link"
          args="$(arg optical_rotate) base_link stereo_camera 100" />

    <!-- Transform -->
    <!--<node pkg="tf" type="static_transform_publisher" name="link1_broadcaster"
          args="1 0 0 0 0 0 1 link1_parent link1 100" />
    <node pkg="tf" type="static_transform_publisher" name="$(arg camera)_link"
          args="0 0 0.1 0 0 0 /base_link /$(arg camera) 100"/>
    <node pkg="tf" type="static_transform_publisher" name="$(arg camera)_optical_link"
          args="$(arg optical_translation) $(arg optical_rotation) /$(arg camera) /$(arg camera)_optical 100"/>-->

  <group ns="rtabmap">-->
    <!-- Stereo Odometry -->
    <node name="stereo_odometry" pkg="rtabmap_ros" type="stereo_odometry" output="screen">
      <remap from="left/image_rect"   to="$(arg left_image_topic)" />
      <remap from="right/image_rect"  to="$(arg right_image_topic)" />
      <remap from="left/camera_info"  to="$(arg left_camera_info_topic)" />
      <remap from="right/camera_info" to="$(arg right_camera_info_topic)" />
      <remap from="odom"              to="/stereo_odometry" />

      <param name="approx_sync" type="bool" value="$(arg approx_sync)" />
      <param name="frame_id"                    type="string" value="$(arg frame_id)" />
      <param name="odom_frame_id"               type="string" value="odom" />
      <param name="queue_size"                  type="int" value="5" />

      <!--<param name="ground_truth_frame_id"       type="string" value="$(arg ground_truth_frame_id)"/>
      <param name="ground_truth_base_frame_id"  type="string" value="$(arg ground_truth_base_frame_id)"/>
      <param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
      <param name="config_path"                 type="string" value="$(arg cfg)"/>
      <param name="subscribe_rgbd"              type="bool"   value="$(arg subscribe_rgbd)"/>
      <param name="guess_frame_id"              type="string" value="$(arg odom_guess_frame_id)"/>
      <param name="guess_min_translation"       type="double" value="$(arg odom_guess_min_translation)"/>
      <param name="guess_min_rotation"          type="double" value="$(arg odom_guess_min_rotation)"/>-->
    </node>

    <!-- Visual SLAM -->
    <!--<node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args=">
      <param name="subscribe_depth"     type="bool" value="true"/>
      <param name="subscribe_laserScan" type="bool" value="false"/>

      <remap from="rgb/image"       to="/stereo/left/image_rect"/>
      <remap from="rgb/camera_info" to="/stereo/left/camera_info"/>
      <remap from="depth/image"     to="/stereo/depth"/>

      <remap from="odom" to="/stereo_odometer/odometry"/>

      <param name="frame_id" type="string" value="$(arg frame_id)" />
      <param name="queue_size" type="int"    value="30"/>

      <param name="Rtabmap/TimeThr"       type="string" value="700"/>
      <param name="SURF/HessianThreshold" type="string" value="600"/>
      <param name="Vis/MaxDepth"          type="string" value="12"/>
      <param name="Vis/MinInliers"        type="string" value="10"/>
      <param name="Vis/InlierDistance"    type="string" value="0.05"/>
    </node>-->

    <!-- Visual SLAM: args: "delete_db_on_start" and "udebug" -->
    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="--delete_db_on_start --udebug">
      <remap from="left/image_rect" to="$(arg left_image_topic)" />
      <remap from="right/image_rect" to="$(arg right_image_topic)" />
      <remap from="left/camera_info" to="$(arg left_camera_info_topic)" />
      <remap from="right/camera_info" to="$(arg right_camera_info_topic)" />

      <remap from="odom" to="/stereo_odometry" />
      <!--<remap from="odom" to="/rtabmap/odom" />-->
      <param name="queue_size" type="int" value="30" />
      <param name="frame_id" type="string" value="$(arg frame_id)" />

      <!-- RTAB-Map's parameters -->
      <param name="approx_sync" type="bool" value="$(arg approx_sync)" />

      <param name="subscribe_stereo" type="bool" value="true" />
      <param name="subscribe_depth" type="bool" value="false" />
    </node>
  </group>
</launch>